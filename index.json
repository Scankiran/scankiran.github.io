[{"content":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn this article, I\u0026rsquo;ll write about how to create your personal website or landing page or any website which you want to show to internet with Hugo and Github Pages. And ofcourse with nocode.\u003c/p\u003e\n\u003cp\u003eNo matter what field you work in, with a little bit of Git and Terminal knowladge, you can easily set up and deploy the site you want. If you\u0026rsquo;re ready, let\u0026rsquo;s start.\u003c/p\u003e\n\u003cp\u003eFirst of all, what is Hugo? Hugo is a static site generator. By editing the config files on top of template themes, you can create a site with your own configurations. So, in fact, you can create your personal website by editing a text file. You can use hundreds of different template themes. Among these themes, you can find hundreds of examples in different categories such as Portfolio, Personal Blog, and Landing Page.\u003c/p\u003e\n\u003cp\u003eSo, What is Hugo? Hugo works fast and is lightweight. No matter how big your site is, it builds quickly and creates the website from your static content in a few seconds. For example, it takes around 5 seconds to build a site which has 60 blog posts and, each post containing 2-3 images. Additionally, as I mentioned earlier, there are many theme alternatives.Also, it is open-source. If you want, you can contribute as well. And I think most importantly, it explains the documentation in detail. And it has a Q\u0026amp;A site. If you have any problem, it can be quickly resolved since others might have faced the same issue before.\u003c/p\u003e\n\u003cp\u003eEnough introduction. Let\u0026rsquo;s start creating our site.\nWhat we need are a text editor (like Sublime), a Terminal, and a GitHub account.\u003c/p\u003e\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start by installing Hugo on our computer. Since I have a Mac, I\u0026rsquo;ll continue with the Mac installation. If you have a different operating system, it\u0026rsquo;s worth checking out \u003ca href=\"https://gohugo.io/installation/\"\u003eHugo Install\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ll use \u003ca href=\"https://brew.sh\"\u003eBrew\u003c/a\u003e to install Hugo. Brew makes things easy here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter installing Hugo, you need to install Git on your device. I also install Git with Brew.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s it for the setup. Now we can start creating our site.\u003c/p\u003e\n\u003ch3 id=\"create-web-site\"\u003eCreate Web Site\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s create a new terminal tab by going to the location where we want to store the files of our site.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site personal_website\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd personal_website\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s create the basis of our site with these 3 commands. So what do these 3 commands do?\u003c/p\u003e\n\u003cp\u003eWith the command in line 1, a site base is created using hugo\u0026rsquo;s own configurations. If we go to the files it created, we will see that it created folders such as content and static for us that we will use frequently in the future.\\n\nThe command on the 2nd line goes to the details of the created folder. \\n\nThe command on the 3rd line initializes git to the base folder of our website. \\n\u003c/p\u003e\n\u003cp\u003eNow it\u0026rsquo;s time to integrate a theme we like. I\u0026rsquo;ll go to \u003ca href=\"https://themes.gohugo.io\"\u003eHugo Themes\u003c/a\u003e and add a theme I like. As the theme, I choose \u003ca href=\"https://themes.gohugo.io/themes/hugo-papermod/\"\u003ePaperMod\u003c/a\u003e, one of the most popular themes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add --depth\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith the command above, we clone the PaperMod theme to our themes folder.\u003c/p\u003e\n\u003cp\u003ePaperMod uses a YAML configuration file. So we need a yaml file. We\u0026rsquo;ll create a config.yaml file with the following command. (It can vary from theme to theme. Some themes use TOML, while others use YAML. This information can be found on the theme\u0026rsquo;s installation page or sample sites.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etouch config.yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter adding the YAML file, I\u0026rsquo;ll copy the content of the \u003ca href=\"https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-installation/#sample-configyml\"\u003esample YAML file\u003c/a\u003e provided by the theme into our local empty YAML file.\u003c/p\u003e\n\u003cp\u003eNow it\u0026rsquo;s time to see our site locally. We\u0026rsquo;ll use the \u003ccode\u003ehugo server\u003c/code\u003e command to bring up our site on localhost. This command will create a static website for us using the content, images, and themes we added, and deploy it on our localhost. When we run the command, we should see an output giving us our local address like this.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/hugoServer.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd ta-da! When we go to localhost, we should see a page like this.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/exampleSite.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eThis command works with the hotreload mechanism. So, as soon as you edit and save the yaml file, all your changes will be reflected automatically.\u003c/p\u003e\n\u003cp\u003eAfter this, you need to edit the content a little. For example, I change the Title and Content parameters under the HomeInfoParams in the yaml file. And it is instantly reflected and my site is updated as follows.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/changedExampleSite.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eWhile you need to add images in the yaml file, for the parameters, you should go to the static folder in the folder where our site is located, add the images there and make it recognize the images by run \u003ccode\u003ehugo server\u003c/code\u003e again. You can then show the images by giving the parameter a path. For example; \u003ccode\u003estatic/img/favicon.png\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExplanations of the parameters here are on \u003ca href=\"https://themes.gohugo.io/themes/hugo-papermod/\"\u003ePaperMod\u003c/a\u003e\u0026rsquo;s page. If you wish, you can edit the variables yourself by changing them.\u003c/p\u003e\n\u003ch3 id=\"create-blog-post\"\u003eCreate Blog Post\u003c/h3\u003e\n\u003cp\u003eWe have organized our site in general terms. Now it\u0026rsquo;s time for the blog post part.\u003c/p\u003e\n\u003cp\u003eFirst of all, there is something we need to pay attention to here. Our theme needs to support the blog theme. In this way, we can display the blog posts which we write on our site. So, what can we do if it doesn\u0026rsquo;t support it? We can create our blog by creating a different site project and choosing a theme that supports blog posts. Then, we can then redirect from our personal site to our blog site. But, for now, let\u0026rsquo;s keep continue with a theme which supported blogs :).\u003c/p\u003e\n\u003cp\u003eWhile creating our article, you can create a markdown file in accordance with the structure by using the command below. All you have to do is open the relevant markdown file and edit it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new content posts/my-first-post.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter running the command, the content of our sample markdown file looks like this.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/exampleMD.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eSince our blog post is marked as draft, it might not appear on our site.\nYou can build that draft files by using the \u003ccode\u003ehugo server -D\u003c/code\u003e or \u003ccode\u003ehugo server --buildDrafts\u003c/code\u003e commands.\u003c/p\u003e\n\u003cp\u003eMarkdown is a file and writing format which supports rich formatting. This article you\u0026rsquo;re reading is also created using markdown formats :) Everything except the images in this article was created using markdown formats. It supports all kinds of formats you can think of, such as mathematical formulas, codes, quotes, collapsible headings, lists, etc.\u003c/p\u003e\n\u003cp\u003eFor more information and a cheat sheet about Markdown, you can \u003ca href=\"https://www.markdownguide.org/cheat-sheet/\"\u003echeck here\u003c/a\u003e. I recommend reviewing it.\u003c/p\u003e\n\u003ch3 id=\"deployment\"\u003eDeployment\u003c/h3\u003e\n\u003cp\u003eWe\u0026rsquo;ve written our blog post. Now it\u0026rsquo;s time to deploy our site.\u003c/p\u003e\n\u003cp\u003eFirst, let\u0026rsquo;s update the baseURL parameter in our config file with the address we\u0026rsquo;ll use before building our site. For example, mine is \u003ca href=\"https://scankiran.github.io\"\u003ehttps://scankiran.github.io\u003c/a\u003e. Your one is will be probably https://[username].github.io.\u003c/p\u003e\n\u003cp\u003eAfter defining our base URL, let\u0026rsquo;s build our site with Hugo. This time, since we\u0026rsquo;re going to send it to an address instead of localhost, we need to get the output of the build files. For this, we\u0026rsquo;ll use the \u003ccode\u003ehugo\u003c/code\u003e command. This command will produce a static site output for us from the posts we wrote and the config file we created and collect it under the public folder.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/hugoExport.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eAll we need to do next is upload this public folder to GitHub.\u003c/p\u003e\n\u003cp\u003eFirst, we need a public repository created with the name \u003ccode\u003eusername+github.io\u003c/code\u003e on GitHub. For example, mine is \u003ca href=\"https://github.com/Scankiran/scankiran.github.io\"\u003escankiran.github.io\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAfter creating the repository, we can proceed in two different ways. We can either directly upload the public folder from the upload files section.\u003c/p\u003e\n\u003cp\u003eOr the other option is to push the public folder to this repository using classic git commands. My preference will be this way.\u003c/p\u003e\n\u003cp\u003eAfter pushing our files, let\u0026rsquo;s go to the pages section in the repository settings and set \u003cstrong\u003eDeploy From Branch - Main\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/repoSettings.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eAfter a few minutes, our site will be built and deployed by GitHub Actions. We can also check the processes from the Actions section.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/workflowResult.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eAt the same time, the result of the operation can be seen with a green tick next to our commit message on the main page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/content/zeroToHugo/workflowResultWithCommit.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eIn this article, we prepared our personal website from scratch together with Hugo and GitHub Pages. I hope it was helpful to you.\u003c/p\u003e\n\u003cp\u003eSee you in the next articles.\u003c/p\u003e\n\u003chr\u003e\n","description":"In this article, I'll write about how to create your personal website or landing page or any website which you want to show to internet with Hugo and Github Pages. And ofcourse with nocode. ","image":"/content/zeroToHugo/hugoCover.png","permalink":"/blogs/zerotohugo/","title":"Zero to Hugo"}]